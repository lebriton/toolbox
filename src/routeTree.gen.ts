/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ToolsRouteImport } from "./routes/tools/route";
import { Route as ToolsBase64TextImport } from "./routes/tools/base64-text";

// Create/Update Routes

const ToolsRouteRoute = ToolsRouteImport.update({
  id: "/tools",
  path: "/tools",
  getParentRoute: () => rootRoute,
} as any);

const ToolsBase64TextRoute = ToolsBase64TextImport.update({
  id: "/base64-text",
  path: "/base64-text",
  getParentRoute: () => ToolsRouteRoute,
} as any).lazy(() =>
  import("./routes/tools/base64-text.lazy").then((d) => d.Route),
);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/tools": {
      id: "/tools";
      path: "/tools";
      fullPath: "/tools";
      preLoaderRoute: typeof ToolsRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/tools/base64-text": {
      id: "/tools/base64-text";
      path: "/base64-text";
      fullPath: "/tools/base64-text";
      preLoaderRoute: typeof ToolsBase64TextImport;
      parentRoute: typeof ToolsRouteImport;
    };
  }
}

// Create and export the route tree

interface ToolsRouteRouteChildren {
  ToolsBase64TextRoute: typeof ToolsBase64TextRoute;
}

const ToolsRouteRouteChildren: ToolsRouteRouteChildren = {
  ToolsBase64TextRoute: ToolsBase64TextRoute,
};

const ToolsRouteRouteWithChildren = ToolsRouteRoute._addFileChildren(
  ToolsRouteRouteChildren,
);

export interface FileRoutesByFullPath {
  "/tools": typeof ToolsRouteRouteWithChildren;
  "/tools/base64-text": typeof ToolsBase64TextRoute;
}

export interface FileRoutesByTo {
  "/tools": typeof ToolsRouteRouteWithChildren;
  "/tools/base64-text": typeof ToolsBase64TextRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/tools": typeof ToolsRouteRouteWithChildren;
  "/tools/base64-text": typeof ToolsBase64TextRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/tools" | "/tools/base64-text";
  fileRoutesByTo: FileRoutesByTo;
  to: "/tools" | "/tools/base64-text";
  id: "__root__" | "/tools" | "/tools/base64-text";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  ToolsRouteRoute: typeof ToolsRouteRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  ToolsRouteRoute: ToolsRouteRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/tools"
      ]
    },
    "/tools": {
      "filePath": "tools/route.tsx",
      "children": [
        "/tools/base64-text"
      ]
    },
    "/tools/base64-text": {
      "filePath": "tools/base64-text.tsx",
      "parent": "/tools"
    }
  }
}
ROUTE_MANIFEST_END */
